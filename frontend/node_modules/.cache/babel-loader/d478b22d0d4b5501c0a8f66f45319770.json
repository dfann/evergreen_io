{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/code/evergreen/frontend/src/frontend/util/route.js\";\nimport React, { useContext } from 'react';\nimport { Redirect, Route, withRouter } from 'react-router-dom';\nimport SessionContext from '../context/session-context';\n\nconst useLoggedIn = () => {\n  const session = useContext(SessionContext);\n  const {\n    session: {\n      userId\n    }\n  } = session;\n  const loggedIn = Boolean(userId);\n  return loggedIn;\n};\n\nconst Auth = ({\n  path,\n  component: Component\n}) => {\n  const isLoggedIn = useLoggedIn();\n  return /*#__PURE__*/React.createElement(Route, {\n    path: path,\n    render: props => isLoggedIn ? /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/questions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  });\n};\n\nconst Protected = ({\n  path,\n  component: Component\n}) => {\n  const isLoggedIn = useLoggedIn();\n  return /*#__PURE__*/React.createElement(Route, {\n    path: path,\n    render: props => isLoggedIn ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 30\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 57\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  });\n};\n\nexport const AuthRoute = withRouter(Auth);\nexport const ProtectedRoute = withRouter(Protected);","map":{"version":3,"sources":["/Users/macbook/code/evergreen/frontend/src/frontend/util/route.js"],"names":["React","useContext","Redirect","Route","withRouter","SessionContext","useLoggedIn","session","userId","loggedIn","Boolean","Auth","path","component","Component","isLoggedIn","props","Protected","AuthRoute","ProtectedRoute"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,UAA1B,QAA4C,kBAA5C;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,OAAO,GAAGN,UAAU,CAACI,cAAD,CAA1B;AACA,QAAM;AACFE,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFD,OAFJ;AAGA,QAAME,QAAQ,GAAGC,OAAO,CAACF,MAAD,CAAxB;AACA,SAAOC,QAAP;AACH,CAPD;;AASA,MAAME,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAS,EAAEC;AAAnB,CAAD,KAAoC;AAC7C,QAAMC,UAAU,GAAGT,WAAW,EAA9B;AACA,sBACI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAEM,IADV;AAEI,IAAA,MAAM,EAAGI,KAAD,IACJD,UAAU,gBACN,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,gBAGN,oBAAC,SAAD,oBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAYH,CAdD;;AAeA,MAAMC,SAAS,GAAG,CAAC;AAAEL,EAAAA,IAAF;AAAQC,EAAAA,SAAS,EAAEC;AAAnB,CAAD,KAAoC;AAClD,QAAMC,UAAU,GAAGT,WAAW,EAA9B;AACA,sBACI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAEM,IADV;AAEI,IAAA,MAAM,EAAGI,KAAD,IACJD,UAAU,gBAAG,oBAAC,SAAD,oBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH,gBAA8B,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAQH,CAVD;;AAYA,OAAO,MAAME,SAAS,GAAGd,UAAU,CAACO,IAAD,CAA5B;AACP,OAAO,MAAMQ,cAAc,GAAGf,UAAU,CAACa,SAAD,CAAjC","sourcesContent":["import React, { useContext } from 'react';\nimport { Redirect, Route, withRouter } from 'react-router-dom';\nimport SessionContext from '../context/session-context';\n\nconst useLoggedIn = () => {\n    const session = useContext(SessionContext);\n    const {\n        session: { userId },\n    } = session;\n    const loggedIn = Boolean(userId);\n    return loggedIn;\n};\n\nconst Auth = ({ path, component: Component }) => {\n    const isLoggedIn = useLoggedIn();\n    return (\n        <Route\n            path={path}\n            render={(props) =>\n                isLoggedIn ? (\n                    <Redirect to=\"/questions\" />\n                ) : (\n                    <Component {...props} />\n                )\n            }\n        />\n    );\n};\nconst Protected = ({ path, component: Component }) => {\n    const isLoggedIn = useLoggedIn();\n    return (\n        <Route\n            path={path}\n            render={(props) =>\n                isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\n            }\n        />\n    );\n};\n\nexport const AuthRoute = withRouter(Auth);\nexport const ProtectedRoute = withRouter(Protected);\n"]},"metadata":{},"sourceType":"module"}