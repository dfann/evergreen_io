{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/code/evergreen/frontend/src/frontend/components/QuestionsPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\nimport questions from '../evergreen_data/questions';\nimport attempts from '../evergreen_data/attempts';\nimport EvergreenNavbar from './EvergreenNavbar';\n\nconst QuestionsPage = () => {\n  const [stateQuestions, setQuestions] = useState([]);\n  const [stateAttempts, setAttempts] = useState([]);\n  useEffect(() => {\n    setQuestions(questions.filter(question => question.userId === '5ed2f6b87164530535b435d8'));\n    setAttempts(attempts.filter(attempt => attempt.questionId === '5ed300917164530535b435da' || attempt.questionId === '5ed301f77164530535b435dd'));\n  }, [stateQuestions.length, stateAttempts.lenght]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(EvergreenNavbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 37\n    }\n  }, \"Question\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 37\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 37\n    }\n  }, \"Comfort Level\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 37\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 37\n    }\n  }, \"Number of Attempts\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 37\n    }\n  }, \"Notes\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }\n  }, stateQuestions && stateQuestions.map(question => {\n    const questionAttempts = stateAttempts.filter(attempt => attempt.questionId === question._id);\n    const totalComfortLevel = questionAttempts.reduce((total, current) => total + current.comfortLevel, 0);\n    const averageComfortLevel = questionAttempts.length !== 0 ? Math.floor(totalComfortLevel / questionAttempts.length) : 0;\n    return /*#__PURE__*/React.createElement(TableRow, {\n      key: question._id,\n      question: question,\n      averageComfortLevel: averageComfortLevel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 45\n      }\n    });\n  })))))));\n};\n\nconst TableRow = ({\n  question,\n  averageComfortLevel\n}) => {\n  // console.log(question);\n  const {\n    title,\n    category,\n    description,\n    notes\n  } = question;\n  const comfortLevelClass = ['Comfort-level-red', 'Comfort-level-yellow', 'Comfort-level-green'];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, category), /*#__PURE__*/React.createElement(\"td\", {\n    className: comfortLevelClass[averageComfortLevel],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, description), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"1\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, notes));\n};\n\nexport default QuestionsPage;","map":{"version":3,"sources":["/Users/macbook/code/evergreen/frontend/src/frontend/components/QuestionsPage.js"],"names":["React","useState","useEffect","Table","Container","Row","Col","Link","questions","attempts","EvergreenNavbar","QuestionsPage","stateQuestions","setQuestions","stateAttempts","setAttempts","filter","question","userId","attempt","questionId","length","lenght","map","questionAttempts","_id","totalComfortLevel","reduce","total","current","comfortLevel","averageComfortLevel","Math","floor","TableRow","title","category","description","notes","comfortLevelClass"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from 'react-router-dom';\nimport questions from '../evergreen_data/questions';\nimport attempts from '../evergreen_data/attempts';\nimport EvergreenNavbar from './EvergreenNavbar';\n\nconst QuestionsPage = () => {\n    const [stateQuestions, setQuestions] = useState([]);\n    const [stateAttempts, setAttempts] = useState([]);\n\n    useEffect(() => {\n        setQuestions(\n            questions.filter(\n                (question) => question.userId === '5ed2f6b87164530535b435d8'\n            )\n        );\n        setAttempts(\n            attempts.filter(\n                (attempt) =>\n                    attempt.questionId === '5ed300917164530535b435da' ||\n                    attempt.questionId === '5ed301f77164530535b435dd'\n            )\n        );\n    }, [stateQuestions.length, stateAttempts.lenght]);\n\n    return (\n        <div>\n            <EvergreenNavbar />\n            <Container>\n                <Row>\n                    <Col>\n                        <Table striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <th>Question</th>\n                                    <th>Category</th>\n                                    <th>Comfort Level</th>\n                                    <th>Description</th>\n                                    <th>Number of Attempts</th>\n                                    <th>Notes</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {stateQuestions &&\n                                    stateQuestions.map((question) => {\n                                        const questionAttempts = stateAttempts.filter(\n                                            (attempt) =>\n                                                attempt.questionId ===\n                                                question._id\n                                        );\n                                        const totalComfortLevel = questionAttempts.reduce(\n                                            (total, current) =>\n                                                total + current.comfortLevel,\n                                            0\n                                        );\n                                        const averageComfortLevel =\n                                            questionAttempts.length !== 0\n                                                ? Math.floor(\n                                                      totalComfortLevel /\n                                                          questionAttempts.length\n                                                  )\n                                                : 0;\n                                        return (\n                                            <TableRow\n                                                key={question._id}\n                                                question={question}\n                                                averageComfortLevel={\n                                                    averageComfortLevel\n                                                }\n                                            />\n                                        );\n                                    })}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nconst TableRow = ({ question, averageComfortLevel }) => {\n    // console.log(question);\n    const { title, category, description, notes } = question;\n    const comfortLevelClass = [\n        'Comfort-level-red',\n        'Comfort-level-yellow',\n        'Comfort-level-green',\n    ];\n    return (\n        <tr>\n            <td>{title}</td>\n            <td>{category}</td>\n            <td className={comfortLevelClass[averageComfortLevel]} />\n            <td>{description}</td>\n            <td>1</td>\n            <td>{notes}</td>\n        </tr>\n    );\n};\n\nexport default QuestionsPage;\n"]},"metadata":{},"sourceType":"module"}